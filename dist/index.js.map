{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { EventEmitter } from \"events\";\nimport {\n  Database,\n  DatabaseOptions,\n  Key,\n  open,\n  RootDatabase,\n  RootDatabaseOptions,\n} from \"lmdbx\";\n\ntype DB = RootDatabase | Database;\n\nexport class Store<V = any, K extends Key = Key> extends EventEmitter {\n  protected env: RootDatabase;\n  protected dbs: Map<string, Database<any, K>>;\n\n  constructor(name: string, options: RootDatabaseOptions) {\n    super();\n    this.env = open(name, options);\n    this._patch(this.env, \"root\");\n    this.dbs = new Map();\n  }\n\n  _patch(db: DB, name: string) {\n    const ogput = db.put.bind(db);\n    const ogremove = db.remove.bind(db);\n    const self = this;\n\n    function _put(id: K, value: V): Promise<boolean>;\n    function _put(\n      id: K,\n      value: V,\n      version: number,\n      ifVersion?: number\n    ): Promise<boolean>;\n    function _put(\n      id: K,\n      value: V,\n      versionOrOptions?: number,\n      ifVersion?: number\n    ): Promise<boolean> {\n      let version: number | undefined;\n      const result = ogput(id, value, versionOrOptions as number, ifVersion);\n      return result.then((res: boolean) => {\n        if (typeof versionOrOptions === \"number\") {\n          version = versionOrOptions;\n        }\n\n        const value = db.getBinary(id);\n        self.emit(\"change\", { type: \"put\", bucket: name, id, value, version });\n        return res;\n      });\n    }\n\n    function _remove(id: K): Promise<boolean>;\n    function _remove(id: K, ifVersion: number): Promise<boolean>;\n    function _remove(id: K, valueToRemove: V): Promise<boolean>;\n    function _remove(id: K, ifVersionOrValue?: number | V): Promise<boolean> {\n      let version: number | undefined;\n      if (typeof ifVersionOrValue === \"number\") {\n        version = ifVersionOrValue;\n      }\n\n      const value = db.get(id);\n      self.emit(\"change\", { type: \"remove\", bucket: name, id, value, version });\n      return ogremove(id, ifVersionOrValue as any);\n    }\n\n    db.put = _put as typeof db.put;\n    db.remove = _remove as typeof db.remove;\n  }\n\n  bucket<TV = any>(name: string, options?: DatabaseOptions): Database<TV, K> {\n    let ns = this.dbs.get(name);\n    if (!ns) {\n      const opts: DatabaseOptions = { cache: true, ...options };\n      ns = this.env.openDB<TV, K>(name, opts);\n      this.dbs.set(name, ns);\n      this._patch(ns, name);\n    }\n    return ns;\n  }\n}\n"],"mappings":"AAAA,OAAS,gBAAAA,MAAoB,SAC7B,OAIE,QAAAC,MAGK,QAIA,IAAMC,EAAN,cAAkDF,CAAa,CAC1D,IACA,IAEV,YAAYG,EAAcC,EAA8B,CACtD,MAAM,EACN,KAAK,IAAMH,EAAKE,EAAMC,CAAO,EAC7B,KAAK,OAAO,KAAK,IAAK,MAAM,EAC5B,KAAK,IAAM,IAAI,GACjB,CAEA,OAAOC,EAAQF,EAAc,CAC3B,IAAMG,EAAQD,EAAG,IAAI,KAAKA,CAAE,EACtBE,EAAWF,EAAG,OAAO,KAAKA,CAAE,EAC5BG,EAAO,KASb,SAASC,EACPC,EACAC,EACAC,EACAC,EACkB,CAClB,IAAIC,EAEJ,OADeR,EAAMI,EAAIC,EAAOC,EAA4BC,CAAS,EACvD,KAAME,GAAiB,CAC/B,OAAOH,GAAqB,WAC9BE,EAAUF,GAGZ,IAAMD,EAAQN,EAAG,UAAUK,CAAE,EAC7B,OAAAF,EAAK,KAAK,SAAU,CAAE,KAAM,MAAO,OAAQL,EAAM,GAAAO,EAAI,MAAAC,EAAO,QAAAG,CAAQ,CAAC,EAC9DC,CACT,CAAC,CACH,CAKA,SAASC,EAAQN,EAAOO,EAAiD,CACvE,IAAIH,EACA,OAAOG,GAAqB,WAC9BH,EAAUG,GAGZ,IAAMN,EAAQN,EAAG,IAAIK,CAAE,EACvB,OAAAF,EAAK,KAAK,SAAU,CAAE,KAAM,SAAU,OAAQL,EAAM,GAAAO,EAAI,MAAAC,EAAO,QAAAG,CAAQ,CAAC,EACjEP,EAASG,EAAIO,CAAuB,CAC7C,CAEAZ,EAAG,IAAMI,EACTJ,EAAG,OAASW,CACd,CAEA,OAAiBb,EAAcC,EAA4C,CACzE,IAAIc,EAAK,KAAK,IAAI,IAAIf,CAAI,EAC1B,GAAI,CAACe,EAAI,CACP,IAAMC,EAAwB,CAAE,MAAO,GAAM,GAAGf,CAAQ,EACxDc,EAAK,KAAK,IAAI,OAAcf,EAAMgB,CAAI,EACtC,KAAK,IAAI,IAAIhB,EAAMe,CAAE,EACrB,KAAK,OAAOA,EAAIf,CAAI,CACtB,CACA,OAAOe,CACT,CACF","names":["EventEmitter","open","Store","name","options","db","ogput","ogremove","self","_put","id","value","versionOrOptions","ifVersion","version","res","_remove","ifVersionOrValue","ns","opts"]}